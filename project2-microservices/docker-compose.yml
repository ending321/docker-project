# docker-compose.yml
version: '2.4'

services:
  nginx:
    build: ./nginx
    ports:
      - "81:80"
    depends_on:
      - web-service
      - api-service
    networks:
      - app-network
    restart: unless-stopped

  web-service:
    build: ./web-service
    environment:
      - API_URL=http://api-service:8000
    depends_on:
      - api-service
    networks:
      - app-network

  api-service:
    build: ./api-service
    environment:
      - DB_HOST=mysql  # 同一网络内用服务器名"mysql访问"，无需宿主机IP
      - DB_USER=root
      - DB_PASSWORD=chenjiewei
      - DB_NAME=appdb
    depends_on:
      - mysql
    networks:
      - app-network
        #ports:
        #- "8000:8000" #临时映射端口，方便测试API（后续可通过nginx代理）
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/my.cnf
      - ./mysql/mysql-files:/var/lib/mysql-files
    environment:
      - MYSQL_ROOT_PASSWORD=chenjiewei
      - MYSQL_DATABASE=appdb
    networks:
      - app-network
    restart: always
    ports:
      - "3307:3306"
    restart: always
    healthcheck:  #检测mysql是否就绪，避免API启动时连接失败
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  jenkins:
    image: jenkins/jenkins
      #container_name: jenkins-project2
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - ./jenkins/jenkins_home:/var/jenkins_home
      # 保留 Docker 相关挂载（操作宿主机 Docker）
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
      - /etc/docker/daemon.json:/etc/docker/daemon.json
    user: "0:0" #以root身份运行
    depends_on:
      - nginx
    networks:
      - app-network
    restart: always

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:
