- hosts: localhost
  connection: local
  tasks:
    - name: Create required directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        recurse: yes
      loop:
        - ./data/mysql-mediawiki
        - ./exporters/mysqld
        - ./data/mediawiki
        - ./data/dokuwiki
        - ./data/grafana
        - ./config
        - ./dashboards
        - ./data/mysql-drupal
        - ./exporters/mysqld-drupal
        - ./data/drupal

          #- name: Create Docker network on remote
          #docker_network:
          #name: pro4-wiki-monitor
          #state: present
          #driver: bridge

    - name: Deploy MySQL for MediaWiki
      docker_container:
        name: mw-mysql
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: chenjiewei
          MYSQL_DATABASE: mediawiki
        volumes:
          - ./data/mysql-mediawiki:/var/lib/mysql
          - ./exporters/mysqld:/etc/mysqld_exporter
        networks:
          - name: pro4-wiki-monitor
        networks_cli_compatible: yes
        restart_policy: always
        healthcheck:
          test: ["CMD-SHELL", "mysqladmin ping -h localhost -uroot -pchenjiewei"]
          interval: 5s
          timeout: 5s
          retries: 5


    - name: Deploy MySQL for Drupal
      docker_container:
        name: drupal-mysql
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: chenjiewei
          MYSQL_DATABASE: drupal
          MYSQL_USER: drupaluser
          MYSQL_PASSWORD: chenjiewei
        volumes:
          - ./data/mysql-drupal:/var/lib/mysql
          - ./exporters/mysqld-drupal:/etc/mysqld_exporter
        networks:
          - name: pro4-wiki-monitor
        networks_cli_compatible: yes
        restart_policy: always
        healthcheck:
          test: ["CMD-SHELL", "mysqladmin ping -h localhost -uroot -pchenjiewei"]
          interval: 5s
          timeout: 5s
          retries: 5


    - name: Deploy MediaWiki LNMP
      docker_container:
        name: mw-web
        image: nginx:alpine
        ports:
          - "8082:80"
        volumes:
          - ./config/nginx-mediawiki.conf:/etc/nginx/conf.d/default.conf
          - ./data/mediawiki:/var/www/html
        networks:
          - name: pro4-wiki-monitor
        links:
          - mw-mysql:mysql
        restart_policy: always
          #depends_on:
          #mw-mysql:
          #condition: service_healthy


    - name: Deploy PHP-FPM for MediaWiki
      docker_container:
        name: mw-php
        image: php:7.4-fpm-alpine  # MediaWiki兼容的PHP版本
        volumes:
          - ./data/mediawiki:/var/www/html
        networks:
          - name: pro4-wiki-monitor
        restart_policy: always
          #depends_on:
          #mw-mysql:
          #condition: service_healthy


    - name: Deploy DokuWiki LNMP
      docker_container:
        name: doku-web
        image: bitnami/dokuwiki:latest
        ports:
          - "8083:80"
        volumes:
          - ./data/dokuwiki:/bitnami/dokuwiki
        networks:
          - name: pro4-wiki-monitor
        restart_policy: always

    - name: Deploy Drupal LAMP
      docker_container:
        name: drupal-web
        image: bitnami/drupal:latest
        ports:
          - "8084:80"
        env:
          DRUPAL_DATABASE_HOST: drupal-mysql
          DRUPAL_DATABASE_PORT_NUMBER: "3306"
          DRUPAL_DATABASE_NAME: drupal
          DRUPAL_DATABASE_USER: drupaluser
          DRUPAL_DATABASE_PASSWORD: chenjiewei
          DRUPAL_USERNAME: admin
          DRUPAL_PASSWORD: admin
        volumes:
          - ./data/drupal:/bitnami/drupal
        networks:
          - name: pro4-wiki-monitor
        restart_policy: always
          #depends_on:
          #drupal-mysql:
          #condition: service_healthy

    - name: Deploy Prometheus
      docker_container:
        name: prometheus
        image: prom/prometheus:latest
        volumes:
          - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
        ports:
          - "9091:9090"
        networks:
          - name: pro4-wiki-monitor
        restart_policy: always

    - name: Deploy Grafana
      docker_container:
        name: grafana
        image: grafana/grafana:latest
        volumes:
          - ./data/grafana:/var/lib/grafana
          - ./dashboards:/home/dashboards
        ports:
          - "3001:3000"
        env:
          GF_SECURITY_ADMIN_PASSWORD: admin
          GF_PATHS_PROVISIONING: /etc/grafana/provisioning
        networks:
          - name: pro4-wiki-monitor
        restart_policy: always
          #depends_on:
          #prometheus:
          # condition: service_started

